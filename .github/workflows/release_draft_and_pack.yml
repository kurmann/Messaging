name: CI, Release Drafting, and Packaging

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CURRENT_VERSION: '' # Dieser Wert wird von GitHub aus dem letzten veröffentlichen Release ermittelt
  CURRENT_RELEASE_NOTES: '' # Dieser Wert wird von GitHub aus dem letzten veröffentlichen Release ermittelt
  NEXT_MINOR_VERSION: '' # Dieser Wert wird in den Jobs berechnet

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Install dependencies
        run: dotnet restore src/Messaging/Messaging.csproj
      - name: Build
        run: dotnet build src/Messaging/Messaging.csproj --no-restore
      - name: Test
        run: dotnet test src/Messaging/Messaging.csproj --no-build
  
  release_draft_and_pack:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Calculate next minor version
        run: |
          IFS='.' read -ra VERSION_PARTS <<< "${{ env.CURRENT_VERSION }}"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          NEXT_MINOR=$(($MINOR + 1))
          NEXT_VERSION="${MAJOR}.${NEXT_MINOR}.${PATCH}"
          echo "NEXT_MINOR_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          
      - name: Set up .NET for packaging
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Pack and create release draft
        run: |
          dotnet pack src/Messaging/Messaging.csproj -p:PackageVersion=${{ env.NEXT_MINOR_VERSION }} --no-build -o nupkgs
          # Fügen Sie hier den Code für Release Drafter hinzu, der auf NEXT_MINOR_VERSION basiert
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
