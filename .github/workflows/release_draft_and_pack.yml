name: CI, Release Drafting, and Packaging

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CURRENT_VERSION: '' # Dieser Wert wird von GitHub aus dem letzten veröffentlichten Release ermittelt
  CURRENT_RELEASE_NOTES: '' # Dieser Wert wird von GitHub aus dem letzten veröffentlichten Release ermittelt
  NEXT_MINOR_VERSION: '' # Dieser Wert wird in den Jobs berechnet

jobs:
  get_current_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest release
        run: |
          RELEASE_JSON=$(gh release view --json tagName,body)
          RELEASE_NAME=$(echo "$RELEASE_JSON" | jq -r '.tagName')
          RELEASE_BODY=$(echo "$RELEASE_JSON" | jq -r '.body' | jq -sRr @json)
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo "RELEASE_BODY=$RELEASE_BODY" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$RELEASE_NAME" >> $GITHUB_ENV

      - name: Print release information
        run: |
          echo "Release name (version): $RELEASE_NAME"
          echo "Release body: $RELEASE_BODY"

  release_draft_and_pack:
    needs: get_current_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore dependencies
        run: dotnet restore src/Messaging/Messaging.csproj

      - name: Build and Test
        run: |
          dotnet build src/Messaging/Messaging.csproj --no-restore
          dotnet test src/Messaging/Messaging.csproj --no-build

      - name: Calculate next minor version
        run: |
          VERSION="${{ env.CURRENT_VERSION }}"
          VERSION="${VERSION#"v"}" # Entfernt das 'v' am Anfang, falls vorhanden
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          NEXT_MINOR=$(($MINOR + 1))
          NEXT_VERSION="v${MAJOR}.${NEXT_MINOR}.${PATCH}"
          echo "NEXT_MINOR_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Pack and create release draft
        run: |
          dotnet pack src/Messaging/Messaging.csproj -p:PackageVersion=${{ env.NEXT_MINOR_VERSION }} --no-build -o nupkgs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
