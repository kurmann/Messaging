name: Publish NuGet Package on Release

on:
  release:
    types: [published]
  workflow_dispatch:  # Erlaubt manuelles Auslösen des Workflows über die GitHub-Oberfläche

env:
  CSPROJ_FILE: src/Messaging/Messaging.csproj
  DOTNET_VERSION: '8.0.x'

jobs:
  build_and_publish:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Get latest release
        id: get_release
        run: |
          $RELEASE_JSON = gh release view --json tagName,name,url
          $RELEASE_TAG_NAME = ($RELEASE_JSON | ConvertFrom-Json).tagName
          $RELEASE_NAME = ($RELEASE_JSON | ConvertFrom-Json).name
          $RELEASE_URL = ($RELEASE_JSON | ConvertFrom-Json).url
          $RELEASE_VERSION = $RELEASE_TAG_NAME.TrimStart("v")
          echo "release_version=$RELEASE_VERSION" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "release_tag_name=$RELEASE_TAG_NAME" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "release_url=$RELEASE_URL" | Out-File -Append -FilePath $env:GITHUB_ENV
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Restore dependencies
        run: dotnet restore ${{ env.CSPROJ_FILE }}
        shell: pwsh
      
      - name: Build
        run: dotnet build ${{ env.CSPROJ_FILE }} --no-restore --configuration Release
        shell: pwsh

      - name: Pack
        run: |
          echo "Using version $env:RELEASE_VERSION from setup job."
          dotnet pack ${{ env.CSPROJ_FILE }} --no-build --configuration Release \
          -p:PackageVersion=$env:RELEASE_VERSION \
          -p:PackageReleaseNotes=$env:RELEASE_URL \
          -p:PackageProjectUrl="https://github.com/${{ github.repository }}" \
          -p:RepositoryUrl="https://github.com/${{ github.repository }}.git" \
          -p:RepositoryType="git" \
          --include-symbols -p:SymbolPackageFormat=snupkg \
          -o nupkgs
        shell: pwsh

      - name: List output files
        run: |
          echo "Listing built packages in nupkgs directory:"
          ls nupkgs/
        shell: pwsh
  
