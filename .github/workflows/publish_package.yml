name: Publish NuGet Package on Release

on:
  release:
    types: [published]
  workflow_dispatch:  # Erlaubt manuelles Auslösen des Workflows über die GitHub-Oberfläche

env:
  CSPROJ_FILE: src/Messaging/Messaging.csproj
  DOTNET_VERSION: '8.0.x'
  LATEST_RELEASE_VERSION: '' # Wird im ersten Job gesetzt

jobs:
  get_latest_release_version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get latest release
        run: |
          RELEASE_JSON=$(gh release view --json tagName,body)
          RELEASE_NAME=$(echo "$RELEASE_JSON" | jq -r '.tagName')
          RELEASE_BODY=$(echo "$RELEASE_JSON" | jq -r '.body' | jq -sRr @json)
          RELEASE_VERSION="${RELEASE_NAME#"v"}"  # Entfernt das 'v' am Anfang, falls vorhanden
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo "RELEASE_BODY=$RELEASE_BODY" >> $GITHUB_ENV
          echo "LATEST_RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_package:
    needs: get_latest_release_version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore dependencies
        run: dotnet restore ${{ env.CSPROJ_FILE }}
      
      - name: Build
        run: dotnet build ${{ env.CSPROJ_FILE }} --no-restore --configuration Release
      
      - name: Pack
        run: |
          echo "Using version $LATEST_RELEASE_VERSION from setup job."
          dotnet pack ${{ env.CSPROJ_FILE }} --no-build --configuration Release -p:PackageVersion=$LATEST_RELEASE_VERSION -o nupkgs
      
  publish_github:
    needs: build_package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish to GitHub Packages
        run: |
          echo "Publishing NuGet package to GitHub Packages."
          dotnet nuget push "nupkgs/*.nupkg" --source "github" --skip-duplicate

  publish_nuget:
    needs: build_package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish to NuGet.org
        run: |
          echo "Publishing NuGet package to NuGet.org."
          dotnet nuget push "nupkgs/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
