<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <PackageType>Dependency</PackageType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>

    <RootNamespace>Kurmann.Messaging</RootNamespace>
    <AssemblyName>Kurmann.Messaging</AssemblyName>
    <PackageId>Kurmann.Messaging</PackageId>
    
    <!-- Package-Tages zur Katalogisierung auf Nuget.org. Mehrere Tags mit Semikolen ";" trennen. -->
    <PackageTags>Messaging; ClassLibrary</PackageTags>

    <!-- Die URL des GIT-Repositories -->
    <RepositoryUrl>https://github.com/kurmann/Messaging</RepositoryUrl>
    <RepositoryType>git</RepositoryType>

    <!-- Die Kurzbeschreibung des NuGet-Packets. Die längere Beschreibung wird als README.md eingebunden -->
    <Description>Leichtgewichtiger, asynchroner Nachrichtendienst für .NET-Anwendungen für Typ-sichere Nachrichten-Kommunikation.</Description>

    <!-- Versionsverwaltung und -strategie: 
     Die <PackageVersion> hier definiert die Basisversion für NuGet-Paketveröffentlichungen.
     Für reguläre, stabile Releases (auf dem 'main'-Branch) sollte diese Version manuell gemäß den SemVer-Richtlinien (MAJOR.MINOR.PATCH) aktualisiert werden, 
     bevor Änderungen in den 'main'-Branch gemerged werden. Dies stellt sicher, dass die Veröffentlichung die richtige Versionsnummer erhält.

     Zwischenreleases, die automatisch über GitHub Actions für Nicht-'main'-Branches generiert werden, fügen der hier definierten Basisversion 
     ein datumsbasiertes Suffix hinzu (z.B. -preview.YYYYMMDDHHMM), um die Einzigartigkeit und den Pre-Release-Status dieser Builds zu kennzeichnen.
     Es ist nicht notwendig und wird nicht empfohlen, Pre-Release-Identifier wie 'alpha', 'beta', oder 'rc' manuell hier einzufügen,
     da dies über den CI/CD-Prozess automatisiert gehandhabt wird. Alle Änderungen, die spezifisch Pre-Release-Versionen betreffen,
     sollten stattdessen durch den CI/CD-Prozess gesteuert werden.

     Die Release Notes für jede Version sollten separat gepflegt und vor dem Merge in den 'main'-Branch aktualisiert werden. -->
    <PackageVersion>0.3.0</PackageVersion>

    <!-- Die Release Notes sollten mindestens vor jeder Minor-Version in der README.md-Datei aktualisiert werden. -->
    <PackageReleaseNotes>Siehe README.md für Details.</PackageReleaseNotes>

    <!-- Die README.md-Datei, die im NuGet-Paket eingebettet wird. Entspricht gleichzeitig der GitHub Readme-Datei. -->
    <PackageReadmeFile>README.md</PackageReadmeFile>

    <!-- Die Lizenzdatei, die im NuGet-Paket eingebettet wird (befindet sich im Wurzelverzeichnis). -->
    <PackageLicenseFile>LICENSE</PackageLicenseFile>

    <!-- Das Icon, das im NuGet-Paket eingebettet wird (befindet sich im Wurzelverzeichnis). -->
    <PackageIcon>PackageIcon.png</PackageIcon>

    <!-- Assemblies und Symbol-Dateien werden im NuGet-Paket eingebettet. -->
    <IncludeContentInPackage>true</IncludeContentInPackage>
    <IncludeBuildOutput>true</IncludeBuildOutput>
    <ContentTargetFolders>content</ContentTargetFolders>

    <!-- Integration von Symbolen und Quelltext -->
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <Deterministic>true</Deterministic>

  </PropertyGroup>

  <!-- Spezifisch für NuGet-Packetierung -->
  <ItemGroup>
    <None Include="..\..\README.md" Pack="true" PackagePath="\" />
    <None Include="..\..\LICENSE" Pack="true" PackagePath="\" />
    <None Include="..\..\PackageIcon.png" Pack="true" PackagePath="\" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Logging" Version="8.0.0" />
    <PackageReference Include="Ulid" Version="1.3.3" />
  </ItemGroup>

</Project>
